#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å –±–∞–∑–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º
"""

from main import ExcelRenderer, create_simple_report  # –ë–∞–∑–æ–≤—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
from advanced_report_generator import AdvancedExcelRenderer  # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
import pandas as pd
from datetime import datetime, timedelta
import json
from jinja2 import Template


def example_1_template_migration():
    """–ü—Ä–∏–º–µ—Ä 1: –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –≤ —Å–ª–æ–∂–Ω—ã–π –æ—Ç—á–µ—Ç"""
    print("\n" + "="*60)
    print("üîÑ –ü—Ä–∏–º–µ—Ä 1: –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –≤ —Å–ª–æ–∂–Ω—ã–π –æ—Ç—á–µ—Ç")
    print("="*60)
    
    # –ü—Ä–æ—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
    simple_data = {
        "title": "–ü—Ä–æ—Å—Ç–æ–π –æ—Ç—á–µ—Ç",
        "date": datetime.now().strftime("%d.%m.%Y"),
        "sales_data": [
            {"region": "–ú–æ—Å–∫–≤–∞", "sales": 1500000, "growth": 15.2},
            {"region": "–°–ü–±", "sales": 1200000, "growth": 8.7},
            {"region": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "sales": 800000, "growth": 12.1}
        ]
    }
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ—Ç—á–µ—Ç —Å –±–∞–∑–æ–≤—ã–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º
    simple_filename = create_simple_report("–ü—Ä–æ—Å—Ç–æ–π –æ—Ç—á–µ—Ç –ø—Ä–æ–¥–∞–∂", simple_data)
    
    # –¢–µ–ø–µ—Ä—å –º–∏–≥—Ä–∏—Ä—É–µ–º –≤ —Å–ª–æ–∂–Ω—ã–π –æ—Ç—á–µ—Ç
    complex_data = {
        "title": "–ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–∂–Ω—ã–π –æ—Ç—á–µ—Ç",
        "subtitle": f"–°–æ–∑–¥–∞–Ω –∏–∑ –ø—Ä–æ—Å—Ç–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ | {datetime.now().strftime('%d.%m.%Y %H:%M')}",
        "summary": {
            "total_sales": sum(item["sales"] for item in simple_data["sales_data"]),
            "avg_growth": sum(item["growth"] for item in simple_data["sales_data"]) / len(simple_data["sales_data"]),
            "regions_count": len(simple_data["sales_data"])
        },
        "sections": [
            {
                "title": "üìä –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º",
                "type": "table",
                "collapsed": False,
                "data": simple_data["sales_data"]
            }
        ]
    }
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–∂–Ω—ã–π –æ—Ç—á–µ—Ç
    advanced_renderer = AdvancedExcelRenderer()
    complex_wb = advanced_renderer.create_collapsible_report(complex_data)
    complex_filename = f"integration_migrated_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
    advanced_renderer.save_report(complex_filename)
    
    print(f"‚úÖ –ü—Ä–æ—Å—Ç–æ–π –æ—Ç—á–µ—Ç: {simple_filename}")
    print(f"‚úÖ –°–ª–æ–∂–Ω—ã–π –æ—Ç—á–µ—Ç: {complex_filename}")
    print("üìã –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:")
    print("  ‚Ä¢ –ú–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞")
    print("  ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–¥–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫")
    print("  ‚Ä¢ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
    
    return simple_filename, complex_filename


def example_2_hybrid_report():
    """–ü—Ä–∏–º–µ—Ä 2: –ì–∏–±—Ä–∏–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º"""
    print("\n" + "="*60)
    print("üîÄ –ü—Ä–∏–º–µ—Ä 2: –ì–∏–±—Ä–∏–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º")
    print("="*60)
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    hybrid_data = {
        "company": "–û–û–û '–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏'",
        "period": "Q1 2025",
        "prepared_by": "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–¥–µ–ª",
        "summary_metrics": {
            "revenue": 15000000,
            "profit": 3500000,
            "employees": 250,
            "projects": 45
        },
        "departments": [
            {
                "name": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
                "budget": 5000000,
                "actual": 4800000,
                "efficiency": 96.0,
                "projects": [
                    {"name": "–ü—Ä–æ–µ–∫—Ç A", "status": "–ó–∞–≤–µ—Ä—à–µ–Ω", "budget": 1500000, "actual": 1450000},
                    {"name": "–ü—Ä–æ–µ–∫—Ç B", "status": "–í —Ä–∞–±–æ—Ç–µ", "budget": 2000000, "actual": 1800000},
                    {"name": "–ü—Ä–æ–µ–∫—Ç C", "status": "–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è", "budget": 1500000, "actual": 0}
                ]
            },
            {
                "name": "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥",
                "budget": 3000000,
                "actual": 2900000,
                "efficiency": 96.7,
                "campaigns": [
                    {"name": "–ö–∞–º–ø–∞–Ω–∏—è 1", "reach": 50000, "conversions": 1250, "cost": 800000},
                    {"name": "–ö–∞–º–ø–∞–Ω–∏—è 2", "reach": 75000, "conversions": 1875, "cost": 1200000},
                    {"name": "–ö–∞–º–ø–∞–Ω–∏—è 3", "reach": 30000, "conversions": 600, "cost": 500000}
                ]
            }
        ]
    }
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–∂–Ω—ã–π –æ—Ç—á–µ—Ç —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º
    complex_report_data = {
        "title": f"–û—Ç—á–µ—Ç {hybrid_data['company']} –∑–∞ {hybrid_data['period']}",
        "subtitle": f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω: {hybrid_data['prepared_by']} | {datetime.now().strftime('%d.%m.%Y %H:%M')}",
        "summary": hybrid_data["summary_metrics"],
        "sections": []
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏–∏ –ø–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º
    for dept in hybrid_data["departments"]:
        if dept["name"] == "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞":
            complex_report_data["sections"].append({
                "title": f"üíª –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç: {dept['name']}",
                "type": "grouped_data",
                "collapsed": False,
                "groups": [
                    {
                        "title": "–ü—Ä–æ–µ–∫—Ç—ã",
                        "collapsed": False,
                        "data": dept["projects"]
                    }
                ]
            })
        elif dept["name"] == "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥":
            complex_report_data["sections"].append({
                "title": f"üì¢ –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç: {dept['name']}",
                "type": "table",
                "collapsed": False,
                "data": dept["campaigns"]
            })
    
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç
    advanced_renderer = AdvancedExcelRenderer()
    workbook = advanced_renderer.create_collapsible_report(complex_report_data)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç —Å –±–∞–∑–æ–≤—ã–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º
    # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    detail_template = """
–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó {{ company }}
–ü–µ—Ä–∏–æ–¥: {{ period }}

–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:
- –í—ã—Ä—É—á–∫–∞: {{ summary_metrics.revenue }}
- –ü—Ä–∏–±—ã–ª—å: {{ summary_metrics.profit }}
- –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏: {{ summary_metrics.employees }}
- –ü—Ä–æ–µ–∫—Ç—ã: {{ summary_metrics.projects }}

–ê–Ω–∞–ª–∏–∑ –ø–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º:
{% for dept in departments %}

{{ dept.name }}:
- –ë—é–¥–∂–µ—Ç: {{ dept.budget }}
- –§–∞–∫—Ç–∏—á–µ—Å–∫–∏: {{ dept.actual }}
- –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {{ dept.efficiency }}%
{% endfor %}
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç
    detail_ws = workbook.create_sheet("–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    
    # –†–µ–Ω–¥–µ—Ä–∏–º —à–∞–±–ª–æ–Ω
    template = Template(detail_template)
    rendered_content = template.render(**hybrid_data)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –ª–∏—Å—Ç
    lines = rendered_content.split('\n')
    for row, line in enumerate(lines, 1):
        detail_ws.cell(row=row, column=1, value=line.strip())
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –æ—Ç—á–µ—Ç
    filename = f"integration_complex_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
    workbook.save(filename)
    
    print(f"‚úÖ –ì–∏–±—Ä–∏–¥–Ω—ã–π –æ—Ç—á–µ—Ç: {filename}")
    print("üìã –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:")
    print("  ‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π –ª–∏—Å—Ç: —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä")
    print("  ‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç: –±–∞–∑–æ–≤—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä")
    print("  ‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã + —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑")
    print("  ‚Ä¢ –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    return filename


def example_3_performance_comparison():
    """–ü—Ä–∏–º–µ—Ä 3: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
    print("\n" + "="*60)
    print("‚ö° –ü—Ä–∏–º–µ—Ä 3: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤")
    print("="*60)
    
    import time
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–æ–ª—å—à–æ–π –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö
    large_dataset = []
    for i in range(1000):
        large_dataset.append({
            "id": f"ID-{i:04d}",
            "name": f"–≠–ª–µ–º–µ–Ω—Ç {i}",
            "value": i * 1.5,
            "category": f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {i % 10}",
            "date": (datetime.now() - timedelta(days=i % 365)).strftime("%d.%m.%Y")
        })
    
    # –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞...")
    start_time = time.time()
    
    base_data = {"items": large_dataset[:100]}  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ
    base_filename = create_simple_report("–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ - –ë–∞–∑–æ–≤—ã–π", base_data)
    base_time = time.time() - start_time
    
    # –¢–µ—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞...")
    start_time = time.time()
    
    advanced_renderer = AdvancedExcelRenderer()
    advanced_data = {
        "title": "–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
        "subtitle": f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {len(large_dataset)} –∑–∞–ø–∏—Å–µ–π",
        "summary": {
            "total_records": len(large_dataset),
            "avg_value": sum(item["value"] for item in large_dataset) / len(large_dataset),
            "categories": len(set(item["category"] for item in large_dataset))
        },
        "sections": [
            {
                "title": "üìä –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö",
                "type": "table",
                "collapsed": True,
                "data": large_dataset
            }
        ]
    }
    
    advanced_wb = advanced_renderer.create_collapsible_report(advanced_data)
    advanced_time = time.time() - start_time
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    advanced_filename = f"performance_advanced_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
    advanced_renderer.save_report(advanced_filename)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    performance_data = {
        "title": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
        "subtitle": f"–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
        "summary": {
            "base_time": round(base_time, 3),
            "advanced_time": round(advanced_time, 3),
            "base_records": len(base_data["items"]),
            "advanced_records": len(large_dataset)
        },
        "sections": [
            {
                "title": "üìà –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞",
                "type": "table",
                "collapsed": False,
                "data": [
                    {
                        "generator": "–ë–∞–∑–æ–≤—ã–π",
                        "time_seconds": round(base_time, 3),
                        "records": len(base_data["items"]),
                        "features": "–ü—Ä–æ—Å—Ç—ã–µ —à–∞–±–ª–æ–Ω—ã"
                    },
                    {
                        "generator": "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π",
                        "time_seconds": round(advanced_time, 3),
                        "records": len(large_dataset),
                        "features": "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã"
                    }
                ]
            }
        ]
    }
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    perf_renderer = AdvancedExcelRenderer()
    perf_wb = perf_renderer.create_collapsible_report(performance_data)
    perf_filename = f"performance_test_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
    perf_renderer.save_report(perf_filename)
    
    print(f"‚úÖ –ë–∞–∑–æ–≤—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä: {base_filename} ({base_time:.3f}s)")
    print(f"‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä: {advanced_filename} ({advanced_time:.3f}s)")
    print(f"‚úÖ –û—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {perf_filename}")
    print("üìã –í—ã–≤–æ–¥—ã:")
    print(f"  ‚Ä¢ –ë–∞–∑–æ–≤—ã–π: {len(base_data['items'])} –∑–∞–ø–∏—Å–µ–π –∑–∞ {base_time:.3f}s")
    print(f"  ‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π: {len(large_dataset)} –∑–∞–ø–∏—Å–µ–π –∑–∞ {advanced_time:.3f}s")
    print(f"  ‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {advanced_time/base_time:.1f}x –ø—Ä–∏ {len(large_dataset)/len(base_data['items'])}x –¥–∞–Ω–Ω—ã—Ö")
    
    return base_filename, advanced_filename, perf_filename


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ Excel –æ—Ç—á–µ—Ç–æ–≤")
    print("=" * 60)
    
    results = []
    
    # –ü—Ä–∏–º–µ—Ä 1: –ú–∏–≥—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞
    try:
        simple_file, complex_file = example_1_template_migration()
        results.extend([simple_file, complex_file])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ 1: {e}")
    
    # –ü—Ä–∏–º–µ—Ä 2: –ì–∏–±—Ä–∏–¥–Ω—ã–π –æ—Ç—á–µ—Ç
    try:
        hybrid_file = example_2_hybrid_report()
        results.append(hybrid_file)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ 2: {e}")
    
    # –ü—Ä–∏–º–µ—Ä 3: –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    try:
        base_file, adv_file, perf_file = example_3_performance_comparison()
        results.extend([base_file, adv_file, perf_file])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ 3: {e}")
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "="*60)
    print("üìã –ò–¢–û–ì–ò –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("="*60)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(results)}")
    for file in results:
        print(f"  ‚Ä¢ {file}")
    
    print("\nüéØ –ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:")
    print("  ‚Ä¢ –°–æ–≤–º–µ—Å—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º")
    print("  ‚Ä¢ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –≤ —Å–ª–æ–∂–Ω—ã–µ")
    print("  ‚Ä¢ –ì–∏–±—Ä–∏–¥–Ω—ã–µ –æ—Ç—á–µ—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –ª–∏—Å—Ç–∞–º–∏")
    print("  ‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("  ‚Ä¢ –ü–æ–ª–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å API")


if __name__ == "__main__":
    main() 