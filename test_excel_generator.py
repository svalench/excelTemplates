#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã Excel —à–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä–∞
"""

import json
import os
from datetime import datetime
from create_test_template import create_test_template
from main import generate_report

def create_test_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞"""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        "report_title": "–û—Ç—á–µ—Ç –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∫–æ–º–ø–∞–Ω–∏–∏",
        "report_date": datetime.now().strftime('%d.%m.%Y'),
        "summary": {
            "total_employees": 6,
            "avg_salary": 65000,
            "report_link": "https://company.com/reports/2023"
        }
    }
    
    # –î–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç–¥–µ–ª–∞–º (–¥–ª—è —Ç–∞–±–ª–∏—Ü—ã departments)
    departments_data = [
        {"name": "–û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂", "employee_count": 3, "avg_salary": 55000},
        {"name": "IT –æ—Ç–¥–µ–ª", "employee_count": 2, "avg_salary": 80000},
        {"name": "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è", "employee_count": 1, "avg_salary": 50000}
    ]
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
    employees_data = [
        {"name": "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", "position": "–ú–µ–Ω–µ–¥–∂–µ—Ä", "salary": 50000, "department": "–û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂"},
        {"name": "–û–ª—å–≥–∞ –°–∏–¥–æ—Ä–æ–≤–∞", "position": "–ê–Ω–∞–ª–∏—Ç–∏–∫", "salary": 65000, "department": "–û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂"},
        {"name": "–ü–µ—Ç—Ä –ò–≤–∞–Ω–æ–≤", "position": "–°—Ç–∞–∂–µ—Ä", "salary": 30000, "department": "–û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂"},
        {"name": "–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤", "position": "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "salary": 90000, "department": "IT –æ—Ç–¥–µ–ª"},
        {"name": "–ú–∞—Ä–∏—è –í–æ–ª–∫–æ–≤–∞", "position": "–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫", "salary": 70000, "department": "IT –æ—Ç–¥–µ–ª"},
        {"name": "–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞", "position": "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä", "salary": 50000, "department": "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è"}
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data["departments"] = departments_data
    test_data["employees"] = employees_data
    
    return test_data

def test_excel_generator():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Excel —à–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä–∞")
    print("=" * 50)
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω
        print("1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞...")
        template_path = create_test_template()
        print(f"‚úÖ –®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω: {template_path}")
        
        # 2. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("\n2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        test_data = create_test_data()
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã: {len(test_data['employees'])} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, {len(test_data['departments'])} –æ—Ç–¥–µ–ª–æ–≤")
        
        # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        print("\n3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel –æ—Ç—á–µ—Ç–∞...")
        output_file = generate_report("test_template", test_data, "xlsx")
        print(f"‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {output_file}")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if os.path.exists(output_file):
            file_size = os.path.getsize(output_file)
            print(f"‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ, —Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            final_name = f"generated_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            os.rename(output_file, final_name)
            print(f"üìä –ò—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª: {final_name}")
            
            return final_name
        else:
            print("‚ùå –§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return None

def test_with_json_string():
    """–¢–µ—Å—Ç —Å JSON —Å—Ç—Ä–æ–∫–æ–π –≤–º–µ—Å—Ç–æ —Å–ª–æ–≤–∞—Ä—è"""
    print("\n" + "=" * 50)
    print("üß™ –¢–µ—Å—Ç —Å JSON —Å—Ç—Ä–æ–∫–æ–π")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ JSON —Å—Ç—Ä–æ–∫—É
        test_data = create_test_data()
        json_string = json.dumps(test_data, ensure_ascii=False, indent=2)
        
        print("1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∏–∑ JSON —Å—Ç—Ä–æ–∫–∏...")
        output_file = generate_report("test_template", json_string, "xlsx")
        
        if os.path.exists(output_file):
            final_name = f"json_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            os.rename(output_file, final_name)
            print(f"‚úÖ JSON –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {final_name}")
            return final_name
        else:
            print("‚ùå JSON –æ—Ç—á–µ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ JSON —Ç–µ—Å—Ç–∞: {e}")
        return None

def cleanup_test_files():
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    test_files = ['test_template.xlsx']
    for file in test_files:
        if os.path.exists(file):
            os.remove(file)
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {file}")

if __name__ == '__main__':
    try:
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
        result1 = test_excel_generator()
        
        # –¢–µ—Å—Ç —Å JSON
        result2 = test_with_json_string()
        
        print("\n" + "=" * 50)
        print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 50)
        
        if result1:
            print(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç: {result1}")
        else:
            print("‚ùå –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç: –ü–†–û–í–ê–õ–ï–ù")
            
        if result2:
            print(f"‚úÖ JSON —Ç–µ—Å—Ç: {result2}")
        else:
            print("‚ùå JSON —Ç–µ—Å—Ç: –ü–†–û–í–ê–õ–ï–ù")
            
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        print("\nüìñ –ò–ù–°–¢–†–£–ö–¶–ò–ò:")
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ .xlsx —Ñ–∞–π–ª—ã –≤ Excel –∏–ª–∏ LibreOffice")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏–ª–∏—Å—å")
        print("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    finally:
        # –û—á–∏—Å—Ç–∫–∞ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
        # cleanup_test_files()
        pass 