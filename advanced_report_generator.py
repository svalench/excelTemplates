#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:
- –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –∏ —Å—Ç—Ä–æ–∫
- –ê–≤—Ç–æ—Ñ–∏–ª—å—Ç—Ä–æ–≤
- –£—Å–ª–æ–≤–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
- –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö –∏ —Å–µ–∫—Ü–∏—è—Ö
"""

import pandas as pd
from openpyxl import Workbook, load_workbook
from openpyxl.styles import Font, Alignment, PatternFill, Border, Side, NamedStyle
from openpyxl.formatting.rule import ColorScaleRule, CellIsRule, FormulaRule
from openpyxl.utils.dataframe import dataframe_to_rows
from openpyxl.worksheet.table import Table, TableStyleInfo
from openpyxl.chart import BarChart, LineChart, PieChart, Reference
from openpyxl.drawing.image import Image
from datetime import datetime, timedelta
import json
from jinja2 import Template
import tempfile
import os
import requests
import base64
from io import BytesIO
from PIL import Image as PILImage, ImageDraw, ImageFont


class AdvancedExcelRenderer:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–µ—Ä Excel —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏"""
    
    def __init__(self):
        self.wb = None
        self.ws = None
        self.styles_created = False
        
    def create_styles(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∏–ª–µ–π"""
        if self.styles_created:
            return
            
        # –°—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–∞
        header_style = NamedStyle(name="header_style")
        header_style.font = Font(bold=True, size=14, color="FFFFFF")
        header_style.fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
        header_style.alignment = Alignment(horizontal="center", vertical="center")
        header_style.border = Border(
            left=Side(style='thin'),
            right=Side(style='thin'),
            top=Side(style='thin'),
            bottom=Side(style='thin')
        )
        
        # –°—Ç–∏–ª—å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞
        subheader_style = NamedStyle(name="subheader_style")
        subheader_style.font = Font(bold=True, size=12, color="000000")
        subheader_style.fill = PatternFill(start_color="D9E2F3", end_color="D9E2F3", fill_type="solid")
        subheader_style.alignment = Alignment(horizontal="left", vertical="center")
        
        # –°—Ç–∏–ª—å –¥–∞–Ω–Ω—ã—Ö
        data_style = NamedStyle(name="data_style")
        data_style.font = Font(size=10)
        data_style.alignment = Alignment(horizontal="left", vertical="center")
        data_style.border = Border(
            left=Side(style='thin'),
            right=Side(style='thin'),
            top=Side(style='thin'),
            bottom=Side(style='thin')
        )
        
        # –°—Ç–∏–ª—å —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        number_style = NamedStyle(name="number_style")
        number_style.font = Font(size=10)
        number_style.alignment = Alignment(horizontal="right", vertical="center")
        number_style.number_format = '#,##0.00'
        number_style.border = Border(
            left=Side(style='thin'),
            right=Side(style='thin'),
            top=Side(style='thin'),
            bottom=Side(style='thin')
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ –∫–Ω–∏–≥—É
        try:
            self.wb.add_named_style(header_style)
            self.wb.add_named_style(subheader_style)
            self.wb.add_named_style(data_style)
            self.wb.add_named_style(number_style)
        except ValueError:
            # –°—Ç–∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            pass
            
        self.styles_created = True
    
    def create_collapsible_report(self, data, template_config=None):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ —Å–æ —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—ã–º–∏ —Å–µ–∫—Ü–∏—è–º–∏
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
            template_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞
        """
        self.wb = Workbook()
        self.ws = self.wb.active
        self.ws.title = "–°–ª–æ–∂–Ω—ã–π –æ—Ç—á–µ—Ç"
        
        self.create_styles()
        
        current_row = 1
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
        current_row = self._add_report_header(data, current_row)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º—ã–µ)
        if 'summary' in data:
            current_row = self._add_summary_section(data['summary'], current_row)
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ (—Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—ã–µ)
        if 'sections' in data:
            for section in data['sections']:
                current_row = self._add_collapsible_section(section, current_row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ñ–∏–ª—å—Ç—Ä—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        self._apply_advanced_formatting()
        
        return self.wb
    
    def _add_report_header(self, data, start_row):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ—Ç—á–µ—Ç–∞"""
        title = data.get('title', '–°–ª–æ–∂–Ω—ã–π –æ—Ç—á–µ—Ç')
        subtitle = data.get('subtitle', f"–°–æ–∑–¥–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        self.ws.cell(row=start_row, column=1, value=title)
        self.ws.cell(row=start_row, column=1).style = "header_style"
        self.ws.merge_cells(f'A{start_row}:F{start_row}')
        
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        self.ws.cell(row=start_row + 1, column=1, value=subtitle)
        self.ws.cell(row=start_row + 1, column=1).style = "subheader_style"
        self.ws.merge_cells(f'A{start_row + 1}:F{start_row + 1}')
        
        return start_row + 3
    
    def _add_summary_section(self, summary_data, start_row):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Å–≤–æ–¥–∫–∏"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        self.ws.cell(row=start_row, column=1, value="üìä –û–°–ù–û–í–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò")
        self.ws.cell(row=start_row, column=1).style = "subheader_style"
        self.ws.merge_cells(f'A{start_row}:F{start_row}')
        
        current_row = start_row + 1
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–æ—á–µ–∫
        col = 1
        for key, value in summary_data.items():
            if col > 6:  # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                current_row += 1
                col = 1
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
            self.ws.cell(row=current_row, column=col, value=key.replace('_', ' ').title())
            self.ws.cell(row=current_row, column=col).font = Font(bold=True, size=9)
            
            # –ó–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
            self.ws.cell(row=current_row + 1, column=col, value=value)
            self.ws.cell(row=current_row + 1, column=col).style = "number_style"
            
            col += 1
        
        return current_row + 3
    
    def _add_collapsible_section(self, section_data, start_row):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º–æ–π —Å–µ–∫—Ü–∏–∏"""
        section_title = section_data.get('title', '–°–µ–∫—Ü–∏—è')
        section_type = section_data.get('type', 'table')
        is_collapsed = section_data.get('collapsed', False)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ —Å –∫–Ω–æ–ø–∫–æ–π —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
        collapse_symbol = "‚ñº" if not is_collapsed else "‚ñ∂"
        header_text = f"{collapse_symbol} {section_title}"
        
        self.ws.cell(row=start_row, column=1, value=header_text)
        self.ws.cell(row=start_row, column=1).style = "subheader_style"
        self.ws.merge_cells(f'A{start_row}:F{start_row}')
        
        section_start_row = start_row + 1
        
        if section_type == 'table':
            current_row = self._add_table_with_filters(section_data, section_start_row)
        elif section_type == 'grouped_data':
            current_row = self._add_grouped_data(section_data, section_start_row)
        elif section_type == 'chart':
            current_row = self._add_chart_section(section_data, section_start_row)
        elif section_type == 'image':
            current_row = self._add_image_section(section_data, section_start_row)
        elif section_type == 'drawing':
            current_row = self._add_drawing_section(section_data, section_start_row)
        else:
            current_row = section_start_row
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
        if current_row > section_start_row:
            self._setup_row_grouping(section_start_row, current_row - 1, hidden=is_collapsed)
        
        return current_row + 1
    
    def _add_table_with_filters(self, section_data, start_row):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –∞–≤—Ç–æ—Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
        data = section_data.get('data', [])
        image_columns = section_data.get('image_columns', [])
        
        if not data:
            return start_row
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ data - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        if not isinstance(data, list):
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Å–µ–∫—Ü–∏–∏ '{section_data.get('title', 'Unknown')}' - –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫")
            return start_row
            
        if not data or not isinstance(data[0], dict):
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ —Å–µ–∫—Ü–∏–∏ '{section_data.get('title', 'Unknown')}'")
            return start_row

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        if image_columns:
            return self._add_table_with_images(section_data, start_row)

        df = pd.DataFrame(data)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        for col_idx, column in enumerate(df.columns, 1):
            cell = self.ws.cell(row=start_row, column=col_idx, value=column)
            cell.style = "header_style"
        
        # –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        for row_idx, row_data in enumerate(dataframe_to_rows(df, index=False, header=False), start_row + 1):
            for col_idx, value in enumerate(row_data, 1):
                cell = self.ws.cell(row=row_idx, column=col_idx, value=value)
                if isinstance(value, (int, float)):
                    cell.style = "number_style"
                else:
                    cell.style = "data_style"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã Excel —Å –∞–≤—Ç–æ—Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        table_range = f"A{start_row}:{chr(64 + len(df.columns))}{start_row + len(df)}"
        table = Table(displayName=f"Table{start_row}", ref=table_range)
        
        # –°—Ç–∏–ª—å —Ç–∞–±–ª–∏—Ü—ã
        style = TableStyleInfo(
            name="TableStyleMedium9",
            showFirstColumn=False,
            showLastColumn=False,
            showRowStripes=True,
            showColumnStripes=False
        )
        table.tableStyleInfo = style
        
        self.ws.add_table(table)
        
        # –£—Å–ª–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        self._apply_conditional_formatting(df, start_row)
        
        return start_row + len(df) + 1
    
    def _add_grouped_data(self, section_data, start_row):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–º —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ–º"""
        groups = section_data.get('groups', [])
        
        if not isinstance(groups, list):
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–ø –≤ —Å–µ–∫—Ü–∏–∏ '{section_data.get('title', 'Unknown')}' - –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫")
            return start_row
        
        current_row = start_row
        
        for group in groups:
            if not isinstance(group, dict):
                print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–ø—ã –≤ —Å–µ–∫—Ü–∏–∏ '{section_data.get('title', 'Unknown')}'")
                continue
                
            group_title = group.get('title', '–ì—Ä—É–ø–ø–∞')
            group_data = group.get('data', [])
            is_collapsed = group.get('collapsed', False)
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã (—É—Ä–æ–≤–µ–Ω—å 1)
            collapse_symbol = "‚ñº" if not is_collapsed else "‚ñ∂"
            self.ws.cell(row=current_row, column=1, value=f"  {collapse_symbol} {group_title}")
            self.ws.cell(row=current_row, column=1).font = Font(bold=True, size=11)
            
            group_start_row = current_row + 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
            if not isinstance(group_data, list) or not group_data:
                current_row = group_start_row
                continue
                
            if not isinstance(group_data[0], dict):
                print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø—ã '{group_title}'")
                current_row = group_start_row
                continue
            
            # –î–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
            df = pd.DataFrame(group_data)
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            for col_idx, column in enumerate(df.columns, 2):  # –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞
                cell = self.ws.cell(row=group_start_row, column=col_idx, value=column)
                cell.font = Font(bold=True, size=9)
                cell.fill = PatternFill(start_color="E7E6E6", end_color="E7E6E6", fill_type="solid")
            
            # –î–∞–Ω–Ω—ã–µ
            for row_idx, row_data in enumerate(dataframe_to_rows(df, index=False, header=False), group_start_row + 1):
                for col_idx, value in enumerate(row_data, 2):
                    cell = self.ws.cell(row=row_idx, column=col_idx, value=value)
                    if isinstance(value, (int, float)):
                        cell.style = "number_style"
                    else:
                        cell.style = "data_style"
            
            current_row = group_start_row + len(df) + 1
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫ –≥—Ä—É–ø–ø—ã (—É—Ä–æ–≤–µ–Ω—å 2)
            if current_row > group_start_row:
                self._setup_row_grouping(group_start_row, current_row - 1, level=2, hidden=is_collapsed)
            
            current_row += 1
        
        return current_row
    
    def _add_chart_section(self, section_data, start_row):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º"""
        chart_type = section_data.get('chart_type', 'bar')
        data = section_data.get('data', [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        if not isinstance(data, list) or not data:
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ –≥—Ä–∞—Ñ–∏–∫–µ '{section_data.get('title', 'Unknown')}'")
            return start_row
            
        if not isinstance(data[0], dict):
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞ –≤ —Å–µ–∫—Ü–∏–∏ '{section_data.get('title', 'Unknown')}'")
            return start_row
        
        df = pd.DataFrame(data)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        for row_idx, row_data in enumerate(dataframe_to_rows(df, index=False, header=True), start_row):
            for col_idx, value in enumerate(row_data, 1):
                self.ws.cell(row=row_idx, column=col_idx, value=value)
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        if chart_type == 'bar':
            chart = BarChart()
        elif chart_type == 'line':
            chart = LineChart()
        elif chart_type == 'pie':
            chart = PieChart()
        else:
            chart = BarChart()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞
        data_range = Reference(self.ws, min_col=2, min_row=start_row + 1, 
                              max_col=len(df.columns), max_row=start_row + len(df))
        categories = Reference(self.ws, min_col=1, min_row=start_row + 1, 
                              max_row=start_row + len(df))
        
        chart.add_data(data_range, titles_from_data=True)
        chart.set_categories(categories)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        chart.width = 15
        chart.height = 10
        self.ws.add_chart(chart, f"H{start_row}")
        
        return start_row + len(df) + 15  # –£—á–∏—Ç—ã–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –≥—Ä–∞—Ñ–∏–∫–∞
    
    def _setup_row_grouping(self, start_row, end_row, level=1, hidden=False):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å—Ç—Ä–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è"""
        if start_row >= end_row:
            return
            
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
        for row in range(start_row, end_row + 1):
            self.ws.row_dimensions[row].outline_level = level
            if hidden:
                self.ws.row_dimensions[row].hidden = True
    
    def _apply_conditional_formatting(self, df, start_row):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        for col_idx, column in enumerate(df.columns, 1):
            if df[column].dtype in ['int64', 'float64']:
                # –¶–≤–µ—Ç–æ–≤–∞—è —à–∫–∞–ª–∞ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                range_str = f"{chr(64 + col_idx)}{start_row + 1}:{chr(64 + col_idx)}{start_row + len(df)}"
                rule = ColorScaleRule(
                    start_type='min', start_color='F8696B',
                    mid_type='percentile', mid_value=50, mid_color='FFEB9C',
                    end_type='max', end_color='63BE7B'
                )
                self.ws.conditional_formatting.add(range_str, rule)
    
    def _apply_advanced_formatting(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        for column in self.ws.columns:
            max_length = 0
            column_letter = None
            
            for cell in column:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —è—á–µ–π–∫–∏
                if hasattr(cell, 'column_letter'):
                    column_letter = cell.column_letter
                    try:
                        if cell.value and len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
            
            if column_letter:
                adjusted_width = min(max_length + 2, 50)
                self.ws.column_dimensions[column_letter].width = adjusted_width
        
        # –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏
        self.ws.freeze_panes = 'A4'
    
    def _add_image_section(self, section_data, start_row):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
        image_config = section_data.get('image_config', {})
        
        if not image_config:
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–µ–∫—Ü–∏–∏ '{section_data.get('title', 'Unknown')}'")
            return start_row + 2
        
        image_type = image_config.get('type', 'url')
        source = image_config.get('source', '')
        width = image_config.get('width', 300)
        height = image_config.get('height', 200)
        anchor = image_config.get('anchor', f'B{start_row}')
        description = image_config.get('description', '')
        
        try:
            excel_img = None
            
            if image_type == 'url':
                excel_img = self._load_image_from_url(source)
            elif image_type == 'base64':
                excel_img = self._load_image_from_base64(source)
            elif image_type == 'file':
                excel_img = self._load_image_from_file(source)
            
            if excel_img:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
                excel_img.width = width
                excel_img.height = height
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ª–∏—Å—Ç
                self.ws.add_image(excel_img, anchor)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                if description:
                    desc_row = start_row + int(height / 20) + 1
                    self.ws.cell(row=desc_row, column=2, value=description)
                    self.ws.cell(row=desc_row, column=2).font = Font(italic=True, size=9)
                
                return start_row + int(height / 20) + 3
            else:
                # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç-–∑–∞–≥–ª—É—à–∫—É
                self.ws.cell(row=start_row, column=2, value=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {source}")
                self.ws.cell(row=start_row, column=2).font = Font(color="FF0000")
                return start_row + 2
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            self.ws.cell(row=start_row, column=2, value=f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
            self.ws.cell(row=start_row, column=2).font = Font(color="FF0000")
            return start_row + 2
    
    def _add_drawing_section(self, section_data, start_row):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Å –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–º —Ä–∏—Å–æ–≤–∞–Ω–∏–µ–º"""
        drawing_config = section_data.get('drawing_config', {})
        drawing_type = drawing_config.get('type', 'diagram')
        
        if drawing_type == 'diagram':
            return self._create_diagram(drawing_config, start_row)
        elif drawing_type == 'flowchart':
            return self._create_flowchart(drawing_config, start_row)
        elif drawing_type == 'infographic':
            return self._create_infographic(drawing_config, start_row)
        elif drawing_type == 'custom':
            return self._create_custom_drawing(drawing_config, start_row)
        else:
            print(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ä–∏—Å–æ–≤–∞–Ω–∏—è: {drawing_type}")
            return start_row + 2
    
    def _load_image_from_url(self, url):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ URL"""
        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            return Image(BytesIO(response.content))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ URL {url}: {e}")
            return None
    
    def _load_image_from_base64(self, base64_string):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ base64 —Å—Ç—Ä–æ–∫–∏"""
        try:
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å data:image/...;base64, –µ—Å–ª–∏ –µ—Å—Ç—å
            if ',' in base64_string:
                base64_string = base64_string.split(',')[1]
            
            image_data = base64.b64decode(base64_string)
            return Image(BytesIO(image_data))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None
    
    def _load_image_from_file(self, file_path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(file_path):
                return Image(file_path)
            else:
                print(f"–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                return None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return None
    
    def _add_table_with_images(self, section_data, start_row):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —è—á–µ–π–∫–∞—Ö"""
        data = section_data.get('data', [])
        image_columns = section_data.get('image_columns', [])  # –ö–æ–ª–æ–Ω–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        
        if not data:
            return start_row
        
        if not isinstance(data, list) or not isinstance(data[0], dict):
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Å–µ–∫—Ü–∏–∏ '{section_data.get('title', 'Unknown')}'")
            return start_row

        df = pd.DataFrame(data)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        for col_idx, column in enumerate(df.columns, 1):
            cell = self.ws.cell(row=start_row, column=col_idx, value=column)
            cell.style = "header_style"
        
        # –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        current_row = start_row + 1
        for row_idx, (_, row_data) in enumerate(df.iterrows()):
            row_height = 20  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏
            
            for col_idx, (column, value) in enumerate(row_data.items(), 1):
                cell = self.ws.cell(row=current_row, column=col_idx)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –∫–æ–ª–æ–Ω–∫–æ–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
                if column in image_columns and value:
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        excel_img = None
                        
                        if isinstance(value, dict):
                            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ - —ç—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            img_type = value.get('type', 'url')
                            img_source = value.get('source', '')
                            img_width = value.get('width', 80)
                            img_height = value.get('height', 60)
                            
                            if img_type == 'url':
                                excel_img = self._load_image_from_url(img_source)
                            elif img_type == 'base64':
                                excel_img = self._load_image_from_base64(img_source)
                            elif img_type == 'file':
                                excel_img = self._load_image_from_file(img_source)
                        else:
                            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ URL –∏–ª–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                            if str(value).startswith('http'):
                                excel_img = self._load_image_from_url(str(value))
                            else:
                                excel_img = self._load_image_from_file(str(value))
                            
                            img_width = 80
                            img_height = 60
                        
                        if excel_img:
                            excel_img.width = img_width
                            excel_img.height = img_height
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —è—á–µ–π–∫—É
                            cell_address = f"{chr(64 + col_idx)}{current_row}"
                            self.ws.add_image(excel_img, cell_address)
                            
                            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫–∏
                            row_height = max(row_height, img_height + 10)
                            
                            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–∫–∏
                            col_letter = chr(64 + col_idx)
                            current_width = self.ws.column_dimensions[col_letter].width or 10
                            new_width = max(current_width, (img_width / 7) + 2)
                            self.ws.column_dimensions[col_letter].width = new_width
                        else:
                            cell.value = "‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"
                            cell.font = Font(color="FF0000", size=8)
                            
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —è—á–µ–π–∫—É: {e}")
                        cell.value = "‚ùå –û—à–∏–±–∫–∞"
                        cell.font = Font(color="FF0000", size=8)
                else:
                    # –û–±—ã—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    cell.value = value
                    if isinstance(value, (int, float)):
                        cell.style = "number_style"
                    else:
                        cell.style = "data_style"
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫–∏
            self.ws.row_dimensions[current_row].height = row_height
            current_row += 1
        
        return current_row + 1
    
    def _create_diagram(self, config, start_row):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ"""
        diagram_data = config.get('data', [])
        diagram_style = config.get('style', 'boxes')
        
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é PIL
        img_width = config.get('width', 600)
        img_height = config.get('height', 400)
        
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        pil_img = PILImage.new('RGB', (img_width, img_height), 'white')
        draw = ImageDraw.Draw(pil_img)
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç
            font = ImageFont.truetype("arial.ttf", 12)
            title_font = ImageFont.truetype("arial.ttf", 16)
        except:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç –µ—Å–ª–∏ arial –Ω–µ –Ω–∞–π–¥–µ–Ω
            font = ImageFont.load_default()
            title_font = ImageFont.load_default()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∏–∞–≥—Ä–∞–º–º—ã
        title = config.get('title', '–î–∏–∞–≥—Ä–∞–º–º–∞')
        draw.text((img_width//2 - len(title)*4, 10), title, fill='black', font=title_font)
        
        if diagram_style == 'boxes':
            self._draw_box_diagram(draw, diagram_data, img_width, img_height, font)
        elif diagram_style == 'circles':
            self._draw_circle_diagram(draw, diagram_data, img_width, img_height, font)
        elif diagram_style == 'flow':
            self._draw_flow_diagram(draw, diagram_data, img_width, img_height, font)
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
            img_buffer = BytesIO()
            pil_img.save(img_buffer, format='PNG')
            img_buffer.seek(0)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ Excel
            excel_img = Image(img_buffer)
            excel_img.width = img_width // 2  # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–ª—è Excel
            excel_img.height = img_height // 2
            
            self.ws.add_image(excel_img, f'B{start_row}')
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã –≤ Excel: {e}")
        
        return start_row + int(img_height / 30) + 2
    
    def _draw_box_diagram(self, draw, data, width, height, font):
        """–†–∏—Å–æ–≤–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã —Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞–º–∏"""
        if not data:
            return
        
        box_width = min(120, (width - 100) // len(data))
        box_height = 60
        start_y = height // 2 - box_height // 2
        
        for i, item in enumerate(data):
            x = 50 + i * (box_width + 20)
            y = start_y
            
            # –¶–≤–µ—Ç –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
            color = item.get('color', '#4472C4')
            if color.startswith('#'):
                color = tuple(int(color[i:i+2], 16) for i in (1, 3, 5))
            else:
                color = (68, 114, 196)  # –°–∏–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            # –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
            draw.rectangle([x, y, x + box_width, y + box_height], 
                          fill=color, outline='black', width=2)
            
            # –¢–µ–∫—Å—Ç
            text = item.get('label', f'Item {i+1}')
            text_bbox = draw.textbbox((0, 0), text, font=font)
            text_width = text_bbox[2] - text_bbox[0]
            text_height = text_bbox[3] - text_bbox[1]
            
            text_x = x + (box_width - text_width) // 2
            text_y = y + (box_height - text_height) // 2
            
            draw.text((text_x, text_y), text, fill='white', font=font)
            
            # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–¥ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–º
            value = item.get('value', '')
            if value:
                value_text = str(value)
                value_bbox = draw.textbbox((0, 0), value_text, font=font)
                value_width = value_bbox[2] - value_bbox[0]
                value_x = x + (box_width - value_width) // 2
                draw.text((value_x, y + box_height + 5), value_text, fill='black', font=font)
    
    def _draw_circle_diagram(self, draw, data, width, height, font):
        """–†–∏—Å–æ–≤–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã —Å –∫—Ä—É–≥–∞–º–∏"""
        if not data:
            return
        
        circle_radius = min(40, min(width, height) // 6)
        center_y = height // 2
        
        for i, item in enumerate(data):
            x = 80 + i * (circle_radius * 3)
            y = center_y
            
            # –¶–≤–µ—Ç –∫—Ä—É–≥–∞
            color = item.get('color', '#4472C4')
            if color.startswith('#'):
                color = tuple(int(color[i:i+2], 16) for i in (1, 3, 5))
            else:
                color = (68, 114, 196)
            
            # –†–∏—Å—É–µ–º –∫—Ä—É–≥
            draw.ellipse([x - circle_radius, y - circle_radius, 
                         x + circle_radius, y + circle_radius], 
                        fill=color, outline='black', width=2)
            
            # –¢–µ–∫—Å—Ç –≤ —Ü–µ–Ω—Ç—Ä–µ –∫—Ä—É–≥–∞
            text = item.get('label', f'Item {i+1}')
            text_bbox = draw.textbbox((0, 0), text, font=font)
            text_width = text_bbox[2] - text_bbox[0]
            text_height = text_bbox[3] - text_bbox[1]
            
            text_x = x - text_width // 2
            text_y = y - text_height // 2
            
            draw.text((text_x, text_y), text, fill='white', font=font)
            
            # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–¥ –∫—Ä—É–≥–æ–º
            value = item.get('value', '')
            if value:
                value_text = str(value)
                value_bbox = draw.textbbox((0, 0), value_text, font=font)
                value_width = value_bbox[2] - value_bbox[0]
                value_x = x - value_width // 2
                draw.text((value_x, y + circle_radius + 10), value_text, fill='black', font=font)
    
    def _draw_flow_diagram(self, draw, data, width, height, font):
        """–†–∏—Å–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫-—Å—Ö–µ–º—ã"""
        if not data:
            return
        
        box_width = min(150, (width - 100) // len(data))
        box_height = 50
        start_y = height // 2 - box_height // 2
        
        for i, item in enumerate(data):
            x = 50 + i * (box_width + 30)
            y = start_y
            
            # –¶–≤–µ—Ç –±–ª–æ–∫–∞
            color = item.get('color', '#4472C4')
            if color.startswith('#'):
                color = tuple(int(color[i:i+2], 16) for i in (1, 3, 5))
            else:
                color = (68, 114, 196)
            
            # –†–∏—Å—É–µ–º –±–ª–æ–∫
            draw.rectangle([x, y, x + box_width, y + box_height], 
                          fill=color, outline='black', width=2)
            
            # –¢–µ–∫—Å—Ç
            text = item.get('label', f'Step {i+1}')
            text_bbox = draw.textbbox((0, 0), text, font=font)
            text_width = text_bbox[2] - text_bbox[0]
            text_height = text_bbox[3] - text_bbox[1]
            
            text_x = x + (box_width - text_width) // 2
            text_y = y + (box_height - text_height) // 2
            
            draw.text((text_x, text_y), text, fill='white', font=font)
            
            # –°—Ç—Ä–µ–ª–∫–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–ª–æ–∫—É
            if i < len(data) - 1:
                arrow_start_x = x + box_width
                arrow_end_x = x + box_width + 30
                arrow_y = y + box_height // 2
                
                # –õ–∏–Ω–∏—è —Å—Ç—Ä–µ–ª–∫–∏
                draw.line([arrow_start_x, arrow_y, arrow_end_x, arrow_y], 
                         fill='black', width=2)
                
                # –ù–∞–∫–æ–Ω–µ—á–Ω–∏–∫ —Å—Ç—Ä–µ–ª–∫–∏
                draw.polygon([arrow_end_x, arrow_y, 
                             arrow_end_x - 10, arrow_y - 5,
                             arrow_end_x - 10, arrow_y + 5], 
                            fill='black')
    
    def _create_flowchart(self, config, start_row):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫-—Å—Ö–µ–º—ã"""
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥ —á—Ç–æ –∏ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º
        return self._create_diagram(config, start_row)
    
    def _create_infographic(self, config, start_row):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏"""
        infographic_data = config.get('data', [])
        
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img_width = config.get('width', 800)
        img_height = config.get('height', 500)
        
        pil_img = PILImage.new('RGB', (img_width, img_height), 'white')
        draw = ImageDraw.Draw(pil_img)
        
        try:
            font = ImageFont.truetype("arial.ttf", 12)
            title_font = ImageFont.truetype("arial.ttf", 16)
        except:
            font = ImageFont.load_default()
            title_font = ImageFont.load_default()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = config.get('title', '–ò–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞')
        draw.text((img_width//2 - len(title)*6, 10), title, fill='black', font=title_font)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        cols = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫
        rows = (len(infographic_data) + cols - 1) // cols
        
        cell_width = img_width // cols
        cell_height = (img_height - 50) // rows
        
        for i, item in enumerate(infographic_data):
            col = i % cols
            row = i // cols
            
            x = col * cell_width + 20
            y = 50 + row * cell_height + 20
            
            item_type = item.get('type', 'metric')
            
            if item_type == 'metric':
                self._draw_metric_card(draw, item, x, y, font, title_font)
            elif item_type == 'progress':
                self._draw_progress_bar(draw, item, x, y, font)
            elif item_type == 'icon':
                self._draw_icon_with_text(draw, item, x, y, font)
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
            img_buffer = BytesIO()
            pil_img.save(img_buffer, format='PNG')
            img_buffer.seek(0)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ Excel
            excel_img = Image(img_buffer)
            excel_img.width = img_width // 2
            excel_img.height = img_height // 2
            
            self.ws.add_image(excel_img, f'B{start_row}')
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏ –≤ Excel: {e}")
        
        return start_row + int(img_height / 30) + 2
    
    def _draw_metric_card(self, draw, item, x, y, font, title_font):
        """–†–∏—Å–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –º–µ—Ç—Ä–∏–∫–∏"""
        card_width = 200
        card_height = 80
        
        # –¶–≤–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
        color = item.get('color', '#4472C4')
        if color.startswith('#'):
            color = tuple(int(color[i:i+2], 16) for i in (1, 3, 5))
        else:
            color = (68, 114, 196)
        
        # –†–∏—Å—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        draw.rectangle([x, y, x + card_width, y + card_height], 
                      fill=color, outline='black', width=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        label = item.get('label', '–ú–µ—Ç—Ä–∏–∫–∞')
        draw.text((x + 10, y + 10), label, fill='white', font=font)
        
        # –ó–Ω–∞—á–µ–Ω–∏–µ
        value = item.get('value', '0')
        draw.text((x + 10, y + 35), str(value), fill='white', font=title_font)
    
    def _draw_progress_bar(self, draw, item, x, y, font):
        """–†–∏—Å–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        bar_width = 200
        bar_height = 20
        progress = item.get('progress', 0)
        
        # –§–æ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        draw.rectangle([x, y + 20, x + bar_width, y + 20 + bar_height], 
                      fill='lightgray', outline='black', width=1)
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å
        filled_width = int(bar_width * progress / 100)
        color = item.get('color', '#70AD47')
        if color.startswith('#'):
            color = tuple(int(color[i:i+2], 16) for i in (1, 3, 5))
        else:
            color = (112, 173, 71)
        
        if filled_width > 0:
            draw.rectangle([x, y + 20, x + filled_width, y + 20 + bar_height], 
                          fill=color, outline='black', width=1)
        
        # –ü–æ–¥–ø–∏—Å—å
        label = item.get('label', '–ü—Ä–æ–≥—Ä–µ—Å—Å')
        draw.text((x, y), label, fill='black', font=font)
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç
        draw.text((x + bar_width + 10, y + 20), f"{progress}%", fill='black', font=font)
    
    def _draw_icon_with_text(self, draw, item, x, y, font):
        """–†–∏—Å–æ–≤–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º"""
        symbol = item.get('symbol', '‚óè')
        text = item.get('text', '–¢–µ–∫—Å—Ç')
        color = item.get('color', '#FFC000')
        
        if color.startswith('#'):
            color = tuple(int(color[i:i+2], 16) for i in (1, 3, 5))
        else:
            color = (255, 192, 0)
        
        # –†–∏—Å—É–µ–º —Å–∏–º–≤–æ–ª
        try:
            symbol_font = ImageFont.truetype("arial.ttf", 24)
        except:
            symbol_font = ImageFont.load_default()
        
        draw.text((x, y), symbol, fill=color, font=symbol_font)
        
        # –¢–µ–∫—Å—Ç —Ä—è–¥–æ–º —Å —Å–∏–º–≤–æ–ª–æ–º
        draw.text((x + 30, y + 5), text, fill='black', font=font)
    
    def _create_custom_drawing(self, config, start_row):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ä–∏—Å—É–Ω–∫–∞"""
        commands = config.get('commands', [])
        
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img_width = config.get('width', 500)
        img_height = config.get('height', 300)
        
        pil_img = PILImage.new('RGB', (img_width, img_height), 'white')
        draw = ImageDraw.Draw(pil_img)
        
        try:
            font = ImageFont.truetype("arial.ttf", 12)
        except:
            font = ImageFont.load_default()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        for cmd in commands:
            cmd_type = cmd.get('type', '')
            
            if cmd_type == 'rectangle':
                coords = cmd.get('coords', [0, 0, 100, 100])
                color = cmd.get('color', '#4472C4')
                if color.startswith('#'):
                    color = tuple(int(color[i:i+2], 16) for i in (1, 3, 5))
                draw.rectangle(coords, fill=color, outline='black', width=2)
                
            elif cmd_type == 'circle':
                coords = cmd.get('coords', [0, 0, 100, 100])
                color = cmd.get('color', '#70AD47')
                if color.startswith('#'):
                    color = tuple(int(color[i:i+2], 16) for i in (1, 3, 5))
                draw.ellipse(coords, fill=color, outline='black', width=2)
                
            elif cmd_type == 'line':
                coords = cmd.get('coords', [0, 0, 100, 100])
                color = cmd.get('color', 'black')
                width = cmd.get('width', 1)
                draw.line(coords, fill=color, width=width)
                
            elif cmd_type == 'text':
                position = cmd.get('position', [0, 0])
                text = cmd.get('text', '–¢–µ–∫—Å—Ç')
                color = cmd.get('color', 'black')
                size = cmd.get('size', 12)
                
                try:
                    text_font = ImageFont.truetype("arial.ttf", size)
                except:
                    text_font = font
                
                draw.text(position, text, fill=color, font=text_font)
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
            img_buffer = BytesIO()
            pil_img.save(img_buffer, format='PNG')
            img_buffer.seek(0)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ Excel
            excel_img = Image(img_buffer)
            excel_img.width = img_width // 2
            excel_img.height = img_height // 2
            
            self.ws.add_image(excel_img, f'B{start_row}')
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ä–∏—Å—É–Ω–∫–∞ –≤ Excel: {e}")
        
        return start_row + int(img_height / 30) + 2

    def save_report(self, filename):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞"""
        self.wb.save(filename)
        return filename


def create_complex_report_template():
    """–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Å–ª–æ–∂–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    template_data = {
        "title": "{{report_title}}",
        "subtitle": "–ü–µ—Ä–∏–æ–¥: {{period_start}} - {{period_end}} | –°–æ–∑–¥–∞–Ω: {{creation_date}}",
        "summary": {
            "total_revenue": "{{summary.total_revenue}}",
            "total_orders": "{{summary.total_orders}}",
            "avg_order_value": "{{summary.avg_order_value}}",
            "growth_rate": "{{summary.growth_rate}}",
            "profit_margin": "{{summary.profit_margin}}",
            "customer_count": "{{summary.customer_count}}"
        },
        "sections": [
            {
                "title": "–ü—Ä–æ–¥–∞–∂–∏ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º",
                "type": "table",
                "collapsed": False,
                "data": "{{regional_sales}}"
            },
            {
                "title": "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤",
                "type": "grouped_data",
                "collapsed": True,
                "groups": "{{product_groups}}"
            },
            {
                "title": "–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂",
                "type": "chart",
                "chart_type": "line",
                "collapsed": False,
                "data": "{{sales_dynamics}}"
            },
            {
                "title": "–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
                "type": "table",
                "collapsed": True,
                "data": "{{detailed_analytics}}"
            }
        ]
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —à–∞–±–ª–æ–Ω–∞
    with open('complex_report_template.json', 'w', encoding='utf-8') as f:
        json.dump(template_data, f, ensure_ascii=False, indent=2)
    
    return template_data


def generate_sample_data():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    import random
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    summary = {
        "total_revenue": 2500000,
        "total_orders": 1250,
        "avg_order_value": 2000,
        "growth_rate": 15.5,
        "profit_margin": 28.5,
        "customer_count": 850
    }
    
    # –ü—Ä–æ–¥–∞–∂–∏ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
    regional_sales = [
        {"region": "–ú–æ—Å–∫–≤–∞", "sales": 850000, "orders": 425, "growth": 18.2},
        {"region": "–°–ü–±", "sales": 620000, "orders": 310, "growth": 12.5},
        {"region": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "sales": 380000, "orders": 190, "growth": 8.7},
        {"region": "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "sales": 320000, "orders": 160, "growth": 22.1},
        {"region": "–ö–∞–∑–∞–Ω—å", "sales": 280000, "orders": 140, "growth": 5.3},
        {"region": "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", "sales": 50000, "orders": 25, "growth": -2.1}
    ]
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º
    product_groups = [
        {
            "title": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞",
            "collapsed": False,
            "data": [
                {"product": "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã", "sales": 450000, "units": 150, "margin": 25.5},
                {"product": "–ù–æ—É—Ç–±—É–∫–∏", "sales": 380000, "units": 95, "margin": 18.2},
                {"product": "–ü–ª–∞–Ω—à–µ—Ç—ã", "sales": 220000, "units": 110, "margin": 22.1}
            ]
        },
        {
            "title": "–û–¥–µ–∂–¥–∞",
            "collapsed": True,
            "data": [
                {"product": "–ö—É—Ä—Ç–∫–∏", "sales": 180000, "units": 360, "margin": 45.2},
                {"product": "–î–∂–∏–Ω—Å—ã", "sales": 150000, "units": 300, "margin": 38.5},
                {"product": "–§—É—Ç–±–æ–ª–∫–∏", "sales": 120000, "units": 600, "margin": 52.1}
            ]
        },
        {
            "title": "–ö–Ω–∏–≥–∏",
            "collapsed": True,
            "data": [
                {"product": "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "sales": 85000, "units": 850, "margin": 35.2},
                {"product": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "sales": 65000, "units": 325, "margin": 28.5},
                {"product": "–î–µ—Ç—Å–∫–∏–µ –∫–Ω–∏–≥–∏", "sales": 45000, "units": 450, "margin": 42.1}
            ]
        }
    ]
    
    # –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂
    sales_dynamics = []
    base_date = datetime(2024, 1, 1)
    for i in range(12):
        month_date = base_date + timedelta(days=30*i)
        sales_dynamics.append({
            "month": month_date.strftime("%B"),
            "sales": random.randint(180000, 250000),
            "orders": random.randint(90, 130),
            "customers": random.randint(60, 90)
        })
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    detailed_analytics = []
    for i in range(50):
        detailed_analytics.append({
            "order_id": f"ORD-{1000+i}",
            "customer": f"–ö–ª–∏–µ–Ω—Ç {i+1}",
            "product": random.choice(["–°–º–∞—Ä—Ç—Ñ–æ–Ω", "–ù–æ—É—Ç–±—É–∫", "–ö—É—Ä—Ç–∫–∞", "–ö–Ω–∏–≥–∞"]),
            "amount": random.randint(500, 5000),
            "date": (datetime.now() - timedelta(days=random.randint(1, 90))).strftime("%d.%m.%Y"),
            "status": random.choice(["–í—ã–ø–æ–ª–Ω–µ–Ω", "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ", "–û—Ç–º–µ–Ω–µ–Ω"])
        })
    
    return {
        "report_title": "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º",
        "period_start": "01.01.2024",
        "period_end": "31.12.2024",
        "creation_date": datetime.now().strftime("%d.%m.%Y %H:%M"),
        "summary": summary,
        "regional_sales": regional_sales,
        "product_groups": product_groups,
        "sales_dynamics": sales_dynamics,
        "detailed_analytics": detailed_analytics
    }


def render_template_with_data(template_data, context_data):
    """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —à–∞–±–ª–æ–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏—Å–ø–æ–ª—å–∑—É—è Jinja2"""
    
    def render_recursive(obj, context):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –æ–±—ä–µ–∫—Ç–∞"""
        if isinstance(obj, str):
            if "{{" in obj or "{%" in obj:
                try:
                    template = Template(obj)
                    return template.render(**context)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —à–∞–±–ª–æ–Ω–∞: {e}")
                    return obj
            return obj
        elif isinstance(obj, dict):
            return {key: render_recursive(value, context) for key, value in obj.items()}
        elif isinstance(obj, list):
            return [render_recursive(item, context) for item in obj]
        else:
            return obj
    
    # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏
    rendered = render_recursive(template_data, context_data)
    
    # –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–µ
    def resolve_data_references(obj, context):
        """–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø—Ä—è–º—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –¥–∞–Ω–Ω—ã–µ"""
        if isinstance(obj, str):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –¥–∞–Ω–Ω—ã–µ
            if obj.startswith("{{") and obj.endswith("}}"):
                key = obj[2:-2].strip()
                # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, summary.total_revenue)
                try:
                    value = context
                    for part in key.split('.'):
                        value = value[part]
                    return value
                except (KeyError, TypeError):
                    print(f"–ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª—é—á: {key}")
                    return obj
            return obj
        elif isinstance(obj, dict):
            return {key: resolve_data_references(value, context) for key, value in obj.items()}
        elif isinstance(obj, list):
            return [resolve_data_references(item, context) for item in obj]
        else:
            return obj
    
    return resolve_data_references(rendered, context_data)


